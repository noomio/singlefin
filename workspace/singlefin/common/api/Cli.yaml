name: Cli

proto: |
  fin_cli_t *fin_cli_new(void);
  void fin_cli_free(fin_cli_t *ctx);
  void fin_cli_input(fin_cli_t *ctx, char c);
  int fin_cli_register(fin_cli_t *ctx, const char *name, fin_cli_callback_t func);

details: |
  fin_cli_t *fin_cli_new(void);
    Return:
      {fin_cli_t*} A new cli context

  void cli_free(fin_cli_t *ctx);
    Arguments:
      {fin_cli_t} ctx
        Free a cli context 

  void fin_cli_input(fin_cli_t *ctx, char c);
    Arguments:
      {fin_cli_t} ctx
        Cli context
      {char} c
        Character to add and parse to the internal ctx

  int fin_cli_register(fin_cli_t *ctx, const char *name, fin_cli_callback_t func);
    Arguments:
      {fin_cli_t*} ctx
        Cli context
      {const char *} name
        Command line name to register
      {fin_cli_callback_t} func
        Callback function to call when the command line has been received
    Return:
      {int} Zero on success otherwise error

callbacks: |
  typedef int (*fin_cli_callback_t)(int args, char *argv[]);

summary: |
  <p>Cli</p>


example: |
  /* User Callback */
  static int cli_cmd_onnx(int args, char *argv[]){
    /* User code */
  }

  int main(void){

    fin_cli_t *fin_cli = cli_new();
    fin_cli_register(cli,"onnx",cli_cmd_onnx);

    for(;;){

      int c = getchar();
      
      if(c != EOF){
        /* Echo */
        putchar(c);
        /* Push to Input */
        fin_cli_input(ctx,c);
      }

    }

  }

tags:
  - Cli


introduced: 1.0.0
