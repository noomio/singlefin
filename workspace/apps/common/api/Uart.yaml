name: Uart

proto: |
  int uart_config(uint8_t serial, uint32_t baud_rate, uint32_t stop_bits, uint32_t bits_per_char, uint32_t parity, uint32_t flow_ctrl);
  uart_deconfig(uint8_t serial);
  uart_write(uint8_t serial, uint8_t *buf, size_t nbytes);
  uart_read(uint32_t serial, uint8_t *buf, size_t nbytes);
  uart_power_up(uint8_t serial);
  uart_power_down(uint8_t serial);

details: |
  int uart_config(uint8_t serial, uint32_t baud_rate, uint32_t stop_bits, uint32_t bits_per_char, uint32_t parity, uint32_t flow_ctrl);
    Arguments:
      {Uint8} serial
        Uart serial number
      {Uint32} baud_rate
        Uart baud rate
      {Uint32} stop_bits
        Uart number of stop bits
      {Uint32} bits_per_char
        Uart bits per character
      {Uint32} parity
        Uart parity
      {Uint32} flow_ctrl
        Uart flow control

  int uart_deconfig(uint8_t serial);
    Arguments:
      {Uint8} serial
        Uart serial number

  int uart_write(uint8_t serial, uint8_t *buf, size_t nbytes);
    Arguments:
      {Uint8} serial
        Uart number
      {Uint8*} buf
        Transmit data buffer 
      {size_t} nbytes
        Transmit data buffer size

  int uart_read(uint32_t serial, uint8_t *buf, size_t nbytes);
    Arguments:
    {Uint32} serial
      Uart number
    {Uint8*} buf
      Receive data buffer 
    {size_t} nbytes
      Receive data buffer size

  int uart_power_up(uint32_t serial);
    Arguments:
    {Uint32} serial
      Uart number

  int uart_power_down(uint32_t serial);
    Arguments:
    {Uint32} serial
      Uart number  

defines: |
    UART1
    UART2
    UART3

summary: |
  <p>Uart</p>


example: |
  /* Uart 3*/
  const char *str = "Aloha!";

  uart_config(UART3,115200,QAPI_UART_1_0_STOP_BITS_E,QAPI_UART_8_BITS_PER_CHAR_E,QAPI_UART_NO_PARITY_E,QAPI_FCTL_OFF_E);
  uart_write(UART3,str,strlen(str));

tags:
  - Uart


introduced: 1.0.0
