name: Spi

proto: |
  spi_power_down(spi_num_t spi_num);
  spi_power_up(spi_num_t spi_num);
  spi_config(spi_num_t spi_num);
  spi_deconfig(spi_num_t spi_num);
  spi_set_frequency(spi_num_t spi_num, uint32_t frequency);
  spi_set_endianess(spi_num_t spi_num, spi_endian_t endian);
  spi_set_bit_per_word(spi_num_t spi_num, spi_bits_per_word_t bpw);
  spi_set_mode(spi_num_t spi_num, spi_mode_t mode);
  spi_set_inter_word_delay(spi_num_t spi_num, uint8_t delay);
  spi_set_loopback(spi_num_t spi_num, bool enable);
  spi_set_chip_select_mode(spi_num_t spi_num, spi_cs_mode_t mode);
  spi_set_chip_select_polarity(spi_num_t spi_num, spi_cs_polarity_t polarity);
  spi_set_chip_select_delay(spi_num_t spi_num, uint8_t delay);
  spi_set_slaves_num(spi_num_t spi_num, uint8_t num);
  spi_send(spi_num_t spi_num, uint8_t *tx_buf, size_t tx_len);
  spi_send_receive(spi_num_t spi_num, uint8_t *tx_buf, uint8_t *rx_buf, size_t rx_len);
  spi_config_dump(spi_num_t spi_num);
  spi_get_name(spi_num_t spi_num);

details: |
  int spi_power_down(spi_num_t spi_num);
    Arguments:
      {spi_num_t} spi_num
        Spi number
    
  int spi_power_up(spi_num_t spi_num);
    Arguments:
      {spi_num_t} spi_num
        Spi number

  int spi_config(spi_num_t spi_num);
    Arguments:
      {spi_num_t} spi_num
        Spi number

  int spi_deconfig(spi_num_t spi_num);
    Arguments:
      {spi_num_t} spi_num
        Spi number

  int spi_set_frequency(spi_num_t spi_num, uint32_t frequency);
    Arguments:
      {spi_num_t} spi_num
        Spi number
      {Uint32} frequency
        Spi clock frequency with a ninimum of 1 Mhz.

  int spi_set_endianess(spi_num_t spi_num, spi_endian_t endian);
    Arguments:
      {spi_num_t} spi_num
        Spi number
      {spi_endian_t} endian
        Set endianess

  int spi_set_bit_per_word(spi_num_t spi_num, spi_bits_per_word_t bpw);
    Arguments:
      {spi_num_t} spi_num
        Spi number
      {spi_bits_per_word_t} bpw
        Set bits per word

  int spi_set_mode(spi_num_t spi_num, spi_mode_t mode);
    Arguments:
    {spi_num_t} spi_num
      Spi number
    {spi_mode_t} mode
      Set mode to 0,1,2 or 3. 
      0: CPOL = 0, CPHA = 0
      1: CPOL = 0, CPHA = 1
      2: CPOL = 1, CPHA = 0
      3: CPOL = 1, CPHA = 1

  int spi_set_inter_word_delay(spi_num_t spi_num, uint8_t delay);
    Arguments:
      {spi_num_t} spi_num
        Spi number
      {Uint8} delay
        Set the inter word delay

  int spi_set_loopback(spi_num_t spi_num, bool enable);
    Arguments:
      {spi_num_t} spi_num
        Spi number
      {Bool} enable
        Set loopack mode  

  int spi_set_chip_select_mode(spi_num_t spi_num, spi_cs_mode_t mode);
    Arguments:
      {spi_num_t} spi_num
        Spi number
      {spi_cs_mode_t} mode
        Set chip select mode to deassert or keep asserted.

  int spi_set_chip_select_polarity(spi_num_t spi_num, spi_cs_polarity_t polarity);
    Arguments:
      {spi_num_t} spi_num
        Spi number
      {spi_cs_polarity_t} polarity
        Set chip select polarity to active low or active high.

  int spi_set_chip_select_delay(spi_num_t spi_num, uint8_t delay);
    Arguments:
      {spi_num_t} spi_num
        Spi number
      {Uint8} delay
        Set chip select delay.

  int spi_set_slaves_num(spi_num_t spi_num, uint8_t num);
    Arguments:
      {spi_num_t} spi_num
        Spi number
      {Uint8} num
        Set the number of daisy chained slaves with a range of 0 to 7.

  int spi_send(spi_num_t spi_num, uint8_t *tx_buf, size_t tx_len);
    Arguments:
      {spi_num_t} spi_num
        Spi number
      {Uint8*} tx_buf
        Transmit data buffer
      {size_t} tx_len
        Transmit data buffer length

  int spi_send_receive(spi_num_t spi_num, uint8_t *tx_buf, uint8_t *rx_buf, size_t rx_len);
    Arguments:
      {spi_num_t} spi_num
        Spi number
      {Uint8*} tx_buf
        Transmit data buffer
      {Uint8*} rx_buf
        Receive data buffer
      {size_t} rx_len
        Receive data buffer length

  void spi_config_dump(spi_num_t spi_num);
    Arguments:
      {spi_num_t} spi_num
        Spi number

  const char *spi_get_name(spi_num_t spi_num);
    Arguments:
      {spi_num_t} spi_num
        Spi number


properties: |
  BG96:
    SPI1
    SPI2
    SPI_CS_DEASSERT
    SPI_CS_KEEP_ASSERTED
    SPI_CS_ACTIVE_LOW
    SPI_CS_ACTIVE_HIGH
    SPI_BYTE_ORDER_NATIVE
    SPI_BYTE_ORDER_LITTLE_ENDIAN
    SPI_BYTE_ORDER_BIG_ENDIAN
    SPI_MODE_0
    SPI_MODE_1
    SPI_MODE_2
    SPI_MODE_3
    SPI_BPW_3
    SPI_BPW_4
    SPI_BPW_5
    SPI_BPW_6
    SPI_BPW_7
    SPI_BPW_8
    SPI_BPW_9
    SPI_BPW_10
    SPI_BPW_11
    SPI_BPW_12
    SPI_BPW_13
    SPI_BPW_14
    SPI_BPW_15
    SPI_BPW_16
    SPI_BPW_17
    SPI_BPW_18
    SPI_BPW_19
    SPI_BPW_20
    SPI_BPW_21
    SPI_BPW_22
    SPI_BPW_23
    SPI_BPW_24
    SPI_BPW_25
    SPI_BPW_26
    SPI_BPW_27
    SPI_BPW_28
    SPI_BPW_29
    SPI_BPW_30
    SPI_BPW_31

summary: |
  <p>Spi bus</p>



example: |
  int res = spi_config(SPI1);
  spi_config_dump(SPI1);
  const char *name = spi_get_name(SPI1);

  res = spi_send_receive(SPI1,&addr,&version,1);

tags:
  - Spi


introduced: 1.0.0
